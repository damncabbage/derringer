// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  (function($) {
    var Derringer, Order, OrderSearchView, OrderView, Orders, Scan, ScanView, Scans;
    Derringer = (function(_super) {

      __extends(Derringer, _super);

      Derringer.name = 'Derringer';

      function Derringer() {
        this.initialize = __bind(this.initialize, this);
        return Derringer.__super__.constructor.apply(this, arguments);
      }

      Derringer.prototype.routes = {
        '': 'index',
        'search/': 'index',
        'search/?q=:terms': 'search',
        'orders/:id': 'order'
      };

      Derringer.prototype.initialize = function() {
        return this.orderSearchView = new OrderSearchView({
          collection: window.orders
        });
      };

      Derringer.prototype.index = function() {
        this.orderSearchView.terms = "";
        this.orderSearchView.render();
        $('#order-panel').addClass('right');
        $('#search-panel').removeClass('left').removeClass('show-results');
        return $('#terms').focus();
      };

      Derringer.prototype.search = function(terms) {
        var _this = this;
        this.orderSearchView.terms = unescape(terms);
        $('#order-panel').addClass('right');
        $('#search-panel').removeClass('left').addClass('show-results');
        $('#search-results').addClass('loading');
        return window.orders.fetch({
          url: '/orders.json',
          success: function(collection, response) {
            _this.orderSearchView.collection = window.orders;
            _this.orderSearchView.render();
            $('#search-results').removeClass('loading').addClass('done');
            return $('#terms').focus();
          }
        });
      };

      Derringer.prototype.order = function(id) {
        var _this = this;
        $('#search-panel').addClass('left');
        $('#order-panel').removeClass('right');
        return window.orders.fetch({
          url: '/orders.json',
          success: function(collection, response) {
            var order, view;
            order = window.orders.get(id);
            view = new OrderView({
              model: order
            });
            return view.render();
          }
        });
      };

      return Derringer;

    })(Backbone.Router);
    Order = (function(_super) {

      __extends(Order, _super);

      Order.name = 'Order';

      function Order() {
        return Order.__super__.constructor.apply(this, arguments);
      }

      Order.prototype.defaults = {
        code: "",
        full_name: "",
        tickets: []
      };

      return Order;

    })(Backbone.Model);
    Orders = (function(_super) {

      __extends(Orders, _super);

      Orders.name = 'Orders';

      function Orders() {
        this.forCode = __bind(this.forCode, this);

        this.forTerms = __bind(this.forTerms, this);

        this.all = __bind(this.all, this);
        return Orders.__super__.constructor.apply(this, arguments);
      }

      Orders.prototype.model = Order;

      Orders.prototype.url = '/orders.json';

      Orders.prototype.all = function() {};

      Orders.prototype.forTerms = function(terms) {
        return this.filter(function(order) {
          return order.get('full_name').toLowerCase().indexOf(terms.toLowerCase()) >= 0;
        });
      };

      Orders.prototype.forCode = function(code, strict) {
        if (strict == null) {
          strict = true;
        }
        if (strict) {
          return this.filter(function() {
            return order.get('code').toLowerCase() === code.toLowerCase();
          });
        } else {
          return this.filter(function() {
            return order.get('code').toLowerCase().indexOf(code.toLowerCase()) === 0;
          });
        }
      };

      return Orders;

    })(Backbone.Collection);
    Scan = (function(_super) {

      __extends(Scan, _super);

      Scan.name = 'Scan';

      function Scan() {
        return Scan.__super__.constructor.apply(this, arguments);
      }

      Scan.prototype.defaults = {
        code: "",
        booth: "",
        created_at: ""
      };

      return Scan;

    })(Backbone.Model);
    Scans = (function(_super) {

      __extends(Scans, _super);

      Scans.name = 'Scans';

      function Scans() {
        this.forOrderByCode = __bind(this.forOrderByCode, this);
        return Scans.__super__.constructor.apply(this, arguments);
      }

      Scans.prototype.model = Scan;

      Scans.prototype.url = '/scans.json';

      Scans.prototype.forOrderByCode = function(code) {
        return this.filter(function(scan) {
          return window.orders.forCode(code, false) !== [];
        });
      };

      return Scans;

    })(Backbone.Collection);
    window.orders = new Orders;
    window.scans = new Scans;
    OrderView = (function(_super) {

      __extends(OrderView, _super);

      OrderView.name = 'OrderView';

      function OrderView() {
        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);
        return OrderView.__super__.constructor.apply(this, arguments);
      }

      OrderView.prototype.el = '#order';

      OrderView.prototype.initialize = function() {
        this.model.bind('change', this.render);
        return this.template = _.template($('#order-template').html());
      };

      OrderView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      OrderView.prototype.events = {
        'click .back': 'back',
        'click .confirm': 'confirm'
      };

      OrderView.prototype.back = function(event) {
        if (window.history.length > 0) {
          return window.history.back();
        } else {
          return window.App.navigate('/', true);
        }
      };

      OrderView.prototype.confirm = function(event) {};

      return OrderView;

    })(Backbone.View);
    OrderSearchView = (function(_super) {

      __extends(OrderSearchView, _super);

      OrderSearchView.name = 'OrderSearchView';

      function OrderSearchView() {
        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);
        return OrderSearchView.__super__.constructor.apply(this, arguments);
      }

      OrderSearchView.prototype.el = '#search';

      OrderSearchView.prototype.initialize = function() {
        return this.template = _.template($('#search-template').html());
      };

      OrderSearchView.prototype.render = function(event) {
        this.$el.html(this.template({
          collection: this.collection.toJSON()
        }));
        this.$el.find('#terms').val(this.terms || "");
        return this;
      };

      OrderSearchView.prototype.events = {
        'submit #search-form': 'search',
        'click .order': 'select'
      };

      OrderSearchView.prototype.search = function(event) {
        var $input;
        event.preventDefault();
        $input = $(event.target).find('#terms');
        return window.App.navigate("/search/?q=" + (escape($input.val())), true);
      };

      OrderSearchView.prototype.select = function(event) {
        var id;
        id = $(event.target).closest('.order').attr('data-id');
        return window.App.navigate("/orders/" + (escape(id)), true);
      };

      return OrderSearchView;

    })(Backbone.View);
    ScanView = (function(_super) {

      __extends(ScanView, _super);

      ScanView.name = 'ScanView';

      function ScanView() {
        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);
        return ScanView.__super__.constructor.apply(this, arguments);
      }

      ScanView.prototype.el = '#search-notice';

      ScanView.prototype.initialize = function() {
        return this.template = _.template($('#search-notice-template').html());
      };

      ScanView.prototype.render = function(event) {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
      };

      ScanView.prototype.events = {
        'add': 'notice'
      };

      ScanView.prototype.notice = function(event) {};

      return ScanView;

    })(Backbone.View);
    return $(document).ready(function() {
      window.App = new Derringer();
      return Backbone.history.start({
        pushState: true
      });
    });
  })(jQuery);

}).call(this);
